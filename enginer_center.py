import streamlit as st
import intely_task
import pandas as pd
import ast 
import manufacture

user_file = 'engineering_centers.csv'

def print(eng_center, add_butt=True):
    st.markdown('### ' + eng_center['name'])
    col1, col2 = st.columns([1, 3])

    st.markdown(f'> –û–ø–∏—Å–∞–Ω–∏–µ: {eng_center.description}')
    st.markdown(f"> {eng_center.work_history}")
    if add_butt:
        st.markdown(f'[–ü–æ–¥—Ä–æ–±–Ω–µ–µ...](http://localhost:8501/?eng_center={eng_center.username})', unsafe_allow_html=True)
    st.markdown(f'–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ```{"```, ```".join(eng_center.categories)}```')
    st.markdown(f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ```{"```, ```".join(eng_center.professions)}```')
    st.write('_'*50)

def run(username):
    params = st.experimental_get_query_params()
    user_df = pd.read_csv(user_file)
    user_df = user_df[['name','username','description','professions','categories','projects','work_history']]
    user_df['categories'] = user_df['categories'].apply(lambda x: ast.literal_eval(x))
    user_df['professions'] = user_df['professions'].apply(lambda x: ast.literal_eval(x))

    user = user_df[user_df.username == username].iloc[0]

    if 'user' in params.keys():
        st.write("–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è:")
        st.write(user.to_dict())
    elif 'edit_user' in params.keys():
        st.write("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:")
        
        with st.form(key='user_edit'):
            new_user = {
                'name' : st.text_input('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',value= user['name']),
                'username': username,
                'description' : st.text_input('–û–ø–∏—Å–∞–Ω–∏–µ',value= user['description']),
                'professions' : st.multiselect('–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã', options=intely_task.professions),
                'categories' :  st.multiselect('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', options=intely_task.science_types),
                'projects' : [],
                'work_history' :st.text_input('–û–±—â–µ–µ —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç',value= user['work_history'])
            }
            submit = st.form_submit_button('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')
            if submit:
                user_df = user_df.append(new_user, ignore_index=True,)
                user_df.to_csv(user_file)

    else:
        st.sidebar.markdown('[‚úç –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](http://localhost:8501/?edit_user=1)')
        st.write("–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á:")
        science_types = ['–•–∏–º–∏—è','–§–∏–∑–∏–∫–∞','–ú–µ–¥–∏—Ü–∏–Ω–∞','–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞','–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ','–°–æ—Ü–∏–∞–ª–æ–≥–∏—è']

        target = st.multiselect(options=science_types, label='–¶–µ–ª–µ–≤—ã–µ –Ω–∞—É—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã(–∏–Ω–∂.—Ü–µ–Ω—Ç—Ä):')
        tab1, tab2, tab3, tab4 = st.tabs(['üß†–ó–∞–¥–∞—á–∏', 'üë®‚Äçüë®‚Äçüë¶‚Äçüë¶–•–∞–∫–∞—Ç–æ–Ω—ã', 'ü¶æ–ò–Ω–∂–µ–Ω–∏—Ä–∏–Ω–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã','üè≠–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è'])
        with tab1:
            for indx,task  in intely_task.tasks.iterrows():
                #task = intely_task.tasks[indx]
                if True in [(category in target) for category in task.categories] or len(target) == 0:
                    intely_task.print(task,add_butt=True, indx=indx)
        with tab2:
            for indx, tender in intely_task.tenders.iterrows():
                #task = intely_task.tasks.iloc[indx]
                if True in [(category in target) for category in tender.categories] or len(target) == 0:
                    intely_task.print_tender(tender,add_submit_butt=True, indx=indx)
        with tab3:
            for indx, user in user_df.iterrows():
                #task = intely_task.tasks.iloc[indx]
                if True in [(category in target) for category in user.categories] or len(target) == 0:
                    print(user,add_butt=True)
        with tab4:
            manufactures = pd.read_csv ('manufacture.csv')
            manufactures['categories'] = manufactures['categories'].apply(lambda x: ast.literal_eval(x))
            for indx, user in manufactures.iterrows():
                #task = intely_task.tasks.iloc[indx]
                if True in [(category in target) for category in user.categories] or len(target) == 0:
                    manufacture.print(user,add_butt=True)
