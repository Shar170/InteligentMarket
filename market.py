import streamlit as st
import intely_task

import ind_prof
import enginer_center
import manufacture

st.set_page_config(
        page_title="Inteligent Market",
        page_icon=":brain:",
        layout="wide",
    )
st.title("–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Ä–∞–∑—É–º–æ–≤")

import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader

with open('./config.yaml') as file:
    config = yaml.load(file, Loader=SafeLoader)


authenticator = stauth.Authenticate(
    config['credentials'],
    config['cookie']['name'],
    config['cookie']['key'],
    config['cookie']['expiry_days'],
    config['preauthorized']
)

name, authentication_status, username = authenticator.login('Login', 'sidebar')

st.session_state["authentication_status"] = authentication_status
st.session_state["name"] = name
st.session_state["username"] = username


if st.session_state["authentication_status"]:
    authenticator.logout('Logout', 'sidebar')
    st.sidebar.write(f'Welcome *{st.session_state["name"]}*')


    params = st.experimental_get_query_params()
    st.sidebar.markdown('[üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è](http://localhost:8501/?user=1)')
    st.sidebar.markdown('[‚úç –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](http://localhost:8501/?edit_user=1)')

    if 'task' in params.keys():
        st.write('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É: ')
        indx = int(params["task"][0])
        task = intely_task.tasks.iloc[indx]
        intely_task.print(task, indx=indx)
        place = st.empty()
        approv = False
        if username in task['approved_workers']:
            place.file_uploader(label='–ê—Ä—Ö–∏–≤ —Å —Ä–µ—à–µ–Ω–∏–µ', type=['.zip', '.rar', '.tar', '.7z'])
        elif username in task['waiting_workers']:
            place.write("–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
        else:
            approv = place.button('üìß –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!')
        if approv:
            intely_task.add_worker(username,indx)
            place.write("–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
        col_b1, col_b2 = st.columns([9,1])
        with col_b2:
            st.markdown(f'[–ì–ª–∞–≤–Ω–∞—è](http://localhost:8501/)')
    elif 'tender' in params.keys():
        st.write('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ö–∞–∫–∞—Ç–æ–Ω: ')
        indx = int(params["tender"][0])
        intely_task.print_tender(intely_task.tenders.iloc[indx], indx=indx, add_resolve=True)
        col_b1, col_b2 = st.columns([9,1])
        with col_b2:
            st.markdown(f'[–ì–ª–∞–≤–Ω–∞—è](http://localhost:8501/)')
    elif 'eng_center' in params.keys():
        st.write('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–Ω–∂–µ–Ω–∏—Ä–∏–Ω–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä: ')
        indx = params["eng_center"][0]
        enginer_center.print_by_username(indx)
        col_b1, col_b2 = st.columns([9,1])
        with col_b2:
            st.markdown(f'[–ì–ª–∞–≤–Ω–∞—è](http://localhost:8501/)')
    elif 'manufacture' in params.keys():
        st.write('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–Ω–∂–µ–Ω–∏—Ä–∏–Ω–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä: ')
        indx = params["manufacture"][0]
        manufacture.print_by_username(indx)
        col_b1, col_b2 = st.columns([9,1])
        with col_b2:
            st.markdown(f'[–ì–ª–∞–≤–Ω–∞—è](http://localhost:8501/)')
    else:
        if config['credentials']['usernames'][username]['role'] == 'eng_centr':
            enginer_center.run(username)
        elif config['credentials']['usernames'][username]['role'] == 'manufactory':
            manufacture.run(name, username)
        elif config['credentials']['usernames'][username]['role'] == 'ind_prof':
            ind_prof.run()

elif st.session_state["authentication_status"] == False:
    st.sidebar.error('Username/password is incorrect')
elif st.session_state["authentication_status"] == None:
    st.sidebar.warning('Please enter your username and password')
    try:
        if authenticator.register_user('Register user', location= 'sidebar', preauthorization=False):
            st.success('User registered successfully')
            with open('./config.yaml', 'w') as file:
                yaml.dump(config, file, default_flow_style=False)
    except Exception as e:
        st.error(e)
